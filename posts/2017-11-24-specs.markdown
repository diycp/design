---
layout: post
title:  "系统设计"
categories: jekyll update
---

# 是什么

本设想暂时起名“基于环境与位置的App发现”。

想达到的效果是：用户走到任何地方，手机上都自动跳出和该位置有关的手机App，并以最小的数据传输量自动下载到本地，用户点开就可以使用。

这种行为类似于主动推送App到用户的手机上，可以让手机成为一个与周围环境发生交互的平台，成为用户能力的延伸。

设想：走进停车场，掏出手机，某停车场客制的手机App自动弹出。点击后，1秒就打开了，并在没有任何登入、设置的情况下，直接导航到您的车位。您找到车后，一键缴停车费，完成。

设想：您去参加会议，不用主动向主办方索要任何有关资料，和会议议程有关的App自动弹出。点击后，1秒就看到整个会议日程安排、资料信息，会议签到也可以直接在这个App中完成。

# 为什么

现在已经有微信扫描二维码进HTML5 App了，为什么还要做这样一件事情呢？

简单原因是，现在已有的方案体验仍然很差。我在某商业广场扫二维码付车费的亲身经历：

1. 掏出手机
2. 点开微信
3. 打开扫一扫
4. 对准二维码，对焦，调整到扫出来为止（光线差的环境下，扫二维码并不快）
5. 关注微信公众号
6. 在微信公众号菜单中找到停车场缴费功能
7. 等待微信的加载条从0加载到100（取决于网络环境，通常要好几秒）
8. 输入自己的车牌号
9. 缴费

这个过程繁琐、耗时长。在这种情境下，缴费的方便程度对顾客是否会选择这样缴费有至关重要的影响。

如果二维码对焦不上扫不出、网速慢，或遇到不懂如何使用微信的用户，他们都会选择放弃。

使用“基于环境与位置的App发现”后，付车费经历可变为：

1. 掏出手机
2. 点开早已在手机主屏等候的停车场App
3. 如果是第一次运行类似程序，则输入自己的车牌号，否则（例如用户曾经在不同的停车场用过本程序），因为SSO的存在，车牌号会自动被输入
4. 缴费

这样就方便快捷多了。

本设想最具独创性的就是主动发现、主动推送。一切都围绕秒开App、好用方便展开。

# Use cases

## 停车场缴费寻车系统

## 博物馆APP导览

## 会议日程提示导览

## 商铺缴费

# 关键技术

## Single sign-on

用户只需要登入一次，所有app都可以获得当前用户的登入信息。以达到点开就用的效果。

不仅需要能实现SSO，还要能实现便捷的付款功能，即计费支付服务也由系统代理，一键付费。

SSO不仅通知用户身份，还能携带用户常用信息（如车牌号等）。

当然，若真正投入使用，必须考虑隐私设置（如默认勾选分享车牌号信息给某停车场缴费应用，但用户可以取消选择）。

具体实现方法可以使用OAuth。

## 传输

### 程序模块化

为了达到最高的传输速率，在网络传输的过程中会对同样的依赖库进行缓存。**创新功能**

一个HTML5 App中，除去图片，绝大多数的体积都来自于JS的依赖包。

JS的包管理系统已经相当完善，因此，HTML5 App在发布时，可以由服务器转换成package.json+除去vendor包的其他代码打包（后称用户代码包）的形式。在运行时，则需要下载用户代码包和package.json中定义的包，将它们拼凑后得到完整的代码。这样做的好处是：所有同样的代码包（如jquery、angular）只需要下载一次，之后可以跳过所有vendor代码包的下载！大大节省传输流量。App也可以预置最常用的vendor代码包（如react、angular等）。

### 本地WIFI担任CDN

本地WIFI可以担任一个局部App Registry的镜像，WIFI拥有者可以指定缓存什么样类型的APP和框架。最常见的Use Case就是缓存自己会提供给用户使用的那个App。这样，用户可以从局域网下载App而不是从远程服务器下载，传输速度更能显著加快。

### Brotli 压缩算法

使用该算法压缩传输压缩率更高

## App发现

### 基于GPS定位的APP发现

每隔一段时间从中央服务器下载附近区域的APP信息，缓存入本地数据库。

监控设备位置变化，每移动500米，从本地缓存的数据库中做查询、发现新App。

### 基于WIFI和网络信息的APP发现

每当连入新WIFI时，尝试主动发现这个WIFI中包含的APP。

如：访问默认网关的35555端口（随意捏造），或使用类似苹果的Bonjour的service discovery的机制。

# 模块

## 安卓App (系统)

表现形式可以是安卓桌面小工具，4*1，可以在桌面上放4个动态app，然后左右滑动。

## 后端 (中央服务器，App Registry+SSO支持)

1. 用户信息的管理和SSO接口
2. APP元数据的管理
3. APP Registry，内容分发，从中央服务器下载需要的所有文件

## 跑在WIFI网关的服务器

1. 实现service discovery协议
2. 本地提供某些APP。那些APP元数据的管理
3. APP Registry部分缓存

# DEMO APP

## 简易停车场缴费寻车系统

## 简易博物馆APP导览

## 简易会议日程提示导览



# 商业机会

由于业务高度相似，有许多共同流程，可以开发一个高度发达的组件库。

之后写常见的程序，都只要配置组件就行。这样可以以极其低廉的价格给每个停车场、商铺定制APP。

客户不花很多钱就得到品牌形象的提升、业务更加便捷；定制方不费很多力就得到了报酬

这些App都可以量产

[jekyll-gh]: https://github.com/mojombo/jekyll
[jekyll]:    http://jekyllrb.com
